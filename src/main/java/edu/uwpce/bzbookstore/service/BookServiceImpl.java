package edu.uwpce.bzbookstore.service;import edu.uwpce.bzbookstore.dao.BookDao;import edu.uwpce.bzbookstore.model.Book;import edu.uwpce.bzbookstore.model.Genre;import org.hibernate.stat.Statistics;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.CachePut;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;import java.util.List;/** * Hello spring application context with spring Jdbc template! * */@Transactional()@Service("bookService")public class BookServiceImpl implements BookService{  static final Logger log = LoggerFactory.getLogger(BookServiceImpl.class);      @Resource(name = "bookDao")    private BookDao bookDao;/*    @Autowired    private AuthorMapper authorMapper;*/    @Override    public Book findBookById(Integer id) {        return bookDao.findById(id);    }    @Override    public Book findBookByIsbn(String isbn) { return bookDao.findByISBN(isbn); }    @Override    public List<Book> findAllBooks() {        return bookDao.findAll();    }    @Override    public List<Book> findAllBooksInGenre(Genre genre) {        return bookDao.findByGenre(genre);    }    @Override    public List<Book> findAllBooks_named_query_cache() {        return null;    }    @Override    public List<Book> findAllBooksTitleSearch(String titlesearch) {        return null;    }    @Override    public List<Book> getBooksByAuthor(String authorLastName, String authorFirstName)    {        return bookDao.getBooksByAuthor(authorLastName, authorFirstName);    }    @Override    @CachePut(value = "edu.uwpce.bzbookstore.model.Book")    public Book updateBook(Book bookupdate) {        return bookDao.updateBook(bookupdate);    }    @Override    @CacheEvict(value = "edu.uwpce.bzbookstore.model.Book")    public boolean deleteBook(Book bookdelete) {        return bookDao.deleteBook(bookdelete);    }    @CacheEvict(value="edu.uwpce.bzbookstore.model.Book", allEntries=true)    public void refreshBooks( ){        bookDao.refreshAllBooks();    }/*    @Override    public List<Author> findAllAuthors() {        return this.authorMapper.findAllAuthors();    }    @Override    public List<Author> findAuthorsByLastName(String lastName) {        return this.authorMapper.findAuthorsByLastName(lastName);    }*/    @Override    public Statistics getHibernateStatistics() {        return bookDao.getHibernateStatistics();    }}